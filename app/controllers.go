// API "goa-pubsubhubbub-subscriber": Application Controllers
//
// Code generated by goagen v1.1.0-dirty, DO NOT EDIT.
//
// Command:
// $ goagen
// --design=github.com/blueoceans/goa-pubsubhubbub-subscriber/design
// --out=$(GOPATH)/src/github.com/blueoceans/goa-pubsubhubbub-subscriber
// --version=v1.2.0-dirty

package app

import (
	"github.com/goadesign/goa"
	"golang.org/x/net/context"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Decoder.Register(goa.NewXMLDecoder, "application/atom+xml", "application/rss+xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewXMLDecoder, "*/*")
}

// HubController is the controller interface for the Hub actions.
type HubController interface {
	goa.Muxer
	Notify(*NotifyHubContext) error
	Verifiy(*VerifiyHubContext) error
}

// MountHubController "mounts" a Hub resource controller on the given service.
func MountHubController(service *goa.Service, ctrl HubController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewNotifyHubContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Notify(rctx)
	}
	service.Mux.Handle("POST", "/subscriber", ctrl.MuxHandler("Notify", h, nil))
	service.LogInfo("mount", "ctrl", "Hub", "action", "Notify", "route", "POST /subscriber")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewVerifiyHubContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Verifiy(rctx)
	}
	service.Mux.Handle("GET", "/subscriber", ctrl.MuxHandler("Verifiy", h, nil))
	service.LogInfo("mount", "ctrl", "Hub", "action", "Verifiy", "route", "GET /subscriber")
}
